{"version":3,"sources":["index.tsx"],"names":["MyContext","createContext","App","useState","appContext","setAppContext","appName","setAppName","handleContextChange","useCallback","prevContext","useEffect","console","log","Provider","value","onClick","prevAppName","ChildA","memo","ChildB","useContext","ReactDOM","render","document","getElementById"],"mappings":"gKAWMA,EAAYC,yBAAc,GAE1BC,EAAM,WACV,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA8BF,mBAAS,eAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEMC,EAAsBC,uBAAY,WACtCJ,GAAc,SAACK,GAAD,OAAkBA,OAC/B,IAgBH,OARAC,qBAAU,WACRC,QAAQC,IAAI,mBAGdF,qBAAU,WACRC,QAAQC,IAAI,mBAIZ,cAACb,EAAUc,SAAX,CAAoBC,MAAOX,EAA3B,SACE,gCACE,6BAAKE,IACL,4EACA,wBAAQU,QAnBc,WAC1BT,GAAW,SAACU,GAAD,MACO,gBAAhBA,EAAgC,cAAgB,kBAiB9C,6BACA,cAACC,EAAD,CAAQV,oBAAqBA,UAU/BU,EAA0BC,gBAAK,YAA8B,IAA3BX,EAA0B,EAA1BA,oBAStC,OARAG,qBAAU,WACRC,QAAQC,IAAI,qBACX,IAEHF,qBAAU,WACRC,QAAQC,IAAI,sBAIZ,gCACE,2EACA,wBAAQG,QAASR,EAAjB,4BACA,cAACY,EAAD,UAKAA,EAAS,WACbT,qBAAU,WACRC,QAAQC,IAAI,qBACX,IAEHF,qBAAU,WACRC,QAAQC,IAAI,sBAGd,IAAME,EAAQM,qBAAWrB,GACzB,OAAO,qDAAsBe,MAG/BO,IAASC,OAAO,cAACrB,EAAD,IAASsB,SAASC,eAAe,W","file":"static/js/main.7dc84c7d.chunk.js","sourcesContent":["import React, {\n  createContext,\n  FC,\n  memo,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst MyContext = createContext(true);\n\nconst App = () => {\n  const [appContext, setAppContext] = useState(true);\n  const [appName, setAppName] = useState(\"ContextAppA\");\n\n  const handleContextChange = useCallback(() => {\n    setAppContext((prevContext) => !prevContext);\n  }, []);\n\n  const handleAppNameChange = () => {\n    setAppName((prevAppName) =>\n      prevAppName === \"ContextAppA\" ? \"ContextAppB\" : \"ContextAppA\"\n    );\n  };\n\n  useEffect(() => {\n    console.log(\"App mounting\");\n  });\n\n  useEffect(() => {\n    console.log(\"App updating\");\n  });\n\n  return (\n    <MyContext.Provider value={appContext}>\n      <div>\n        <h1>{appName}</h1>\n        <h2>To change app name press the button below:</h2>\n        <button onClick={handleAppNameChange}>Change app name</button>\n        <ChildA handleContextChange={handleContextChange} />\n      </div>\n    </MyContext.Provider>\n  );\n};\n\ntype ChildAProps = {\n  handleContextChange: () => void;\n};\n\nconst ChildA: FC<ChildAProps> = memo(({ handleContextChange }) => {\n  useEffect(() => {\n    console.log(\"ChildA mounting\");\n  }, []);\n\n  useEffect(() => {\n    console.log(\"ChildA updating\");\n  });\n\n  return (\n    <div>\n      <h2>To change context press the button below:</h2>\n      <button onClick={handleContextChange}>Change context</button>\n      <ChildB />\n    </div>\n  );\n});\n\nconst ChildB = () => {\n  useEffect(() => {\n    console.log(\"ChildB mounting\");\n  }, []);\n\n  useEffect(() => {\n    console.log(\"ChildB updating\");\n  });\n\n  const value = useContext(MyContext);\n  return <p>{`The context is ${value}`}</p>;\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}